# -*- coding: utf-8 -*-
"""Aula_20_Pip

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fub6HkW_DDiOkcomx9HkYXs23nZabZLt

O `pip` é um sistema de gerenciamento de pacotes para Python. Ele é uma ferramenta que facilita a instalação, atualização e gerenciamento de bibliotecas e pacotes Python de terceiros. O nome "pip" é uma sigla para "Pip Installs Packages" (ou "Pip Instala Pacotes", em português), o que reflete sua principal função: instalar pacotes Python.

Algumas das principais funcionalidades do `pip` incluem:

1. **Instalação de Pacotes:** O `pip` permite que você instale pacotes Python diretamente do Python Package Index (PyPI) e de outros repositórios de pacotes. Você pode instalar bibliotecas e ferramentas de terceiros com facilidade usando um simples comando `pip install`.
2. **Atualização de Pacotes:** Com o `pip`, você pode atualizar pacotes Python para suas versões mais recentes com o comando `pip install --upgrade`.
3. **Remoção de Pacotes:** O `pip` também permite a remoção de pacotes que você não precisa mais, com o comando `pip uninstall`.
4. **Listagem de Pacotes Instalados:** Você pode listar todos os pacotes Python instalados em seu ambiente com o comando `pip list`.
5. **Requisitos e Ambientes Virtuais:** O `pip` é comumente usado em conjunto com arquivos de requisitos (`requirements.txt`) para especificar as dependências de um projeto. Além disso, ele é usado em ambientes virtuais para isolar as dependências de diferentes projetos.

Para verificar se o `pip` já está instalado em sua máquina, você pode abrir o terminal ou prompt de comando e executar o seguinte comando:

pip --version

Se o `pip` não estiver instalado, você precisará instalá-lo. Dependendo do sistema operacional que você está usando, a instalação pode variar, mas geralmente envolve a instalação do Python e o `pip` é incluído por padrão. Se você precisar instalá-lo separadamente, siga as instruções apropriadas para o seu sistema operacional.

Lembrando que é uma boa prática manter o `pip` atualizado. Você pode atualizá-lo executando o seguinte comando:

python -m pip install --upgrade pip

Isso garantirá que você tenha a versão mais recente do pip em seu sistema.

COMO INSTALAR UMA BIBLIOTECA EM PYTHON

Abra o Terminal (Linux/macOS) ou o Prompt de Comando (Windows):
Você precisará acessar um terminal ou prompt de comando para executar os comandos.

Use o Comando pip install: Para instalar uma biblioteca, use o seguinte comando
pip install seguido pelo nome da biblioteca que você deseja instalar. Por exemplo,
se você quiser instalar a biblioteca requests, execute o seguinte comando:


pip install NOME DA BIBLIOTECA

Isso baixará e instalará a biblioteca

Aguarde a Instalação: O pip fará o download da biblioteca e suas dependências,
se houver, e as instalará em seu ambiente Python. Aguarde até que o processo seja
concluído.
"""

from openpyxl import Workbook
wb = Workbook()

# grab the active worksheet
ws = wb.active

# Data can be assigned directly to cells
ws['A1'] = 42

# Rows can also be appended
ws.append([1, 2, 3])

# Python types will automatically be converted
import datetime
ws['A2'] = datetime.datetime.now()

# Save the file
wb.save("sample.xlsx")

função para adicionar dados

from openpyxl import Workbook

# Função para adicionar dados à planilha

def adicionar_dados(planilha, dados):
    for linha in dados:
        planilha.append(linha)

# Dados a serem inseridos na planilha

dados = [
["Nome", "Idade", "Cidade"],
["Alice", 25, "São Paulo"],
["Bob", 30, "Rio de Janeiro"],
["Charlie", 22, "Belo Horizonte"],
]

# Cria uma nova planilha

wb = Workbook()
planilha = wb.active

# Adiciona os dados à planilha

adicionar_dados(planilha, dados)

# Salva a planilha em um arquivo

wb.save('dados.xlsx')

print("Dados inseridos na planilha 'dados.xlsx'.")